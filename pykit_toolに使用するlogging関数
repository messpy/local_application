import logging

def setup_logging(log_file):
    """ログの設定を行う関数"""
    logging.basicConfig(filename=log_file, 
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s')
    print("関数をファイル名を指定して呼び出してください「logging.info()」")

## カスタムのログレベルを使ってログを記録する
#logging.log(logging.DEBUG, "デバッグ情報です")

try:
    # 何らかの処理を実行する
except Exception as e:
    logging.exception("処理中にエラーが発生しました:")

# プログラムの終了時にロギングシステムをシャットダウンする
logging.shutdown()



###
import subprocess

def create_executable(file_name):
    """指定されたファイル名で pyinstaller を実行し、--onefile オプションを付ける関数"""
    try:
        subprocess.run(['pyinstaller', '--onefile', file_name])
        print("実行可能ファイルが作成されました。")
    except Exception as e:
        print(f"エラーが発生しました: {e}")

if __name__ == "__main__":
    # 実行可能ファイルを作成するファイル名を指定して関数を呼び出す
    create_executable("main.py")



def select_fld(selection):
    """指定されたオプションに応じてフォルダまたはファイルを選択する関数を生成する"""
    root = tk.Tk()
    root.withdraw()

    if selection == "fld":
        return filedialog.askdirectory()
    elif selection == "flds":
        return filedialog.askdirectoryes()
    elif selection == "fle":
        return filedialog.askopenfilename()
    elif selection == "fles":
        return filedialog.askopenfilenames()
